name: Build and Push Multi-arch Artifacts

on:
  push:
    branches: ['main', 'master', 'release-*', 'method1-local-generated']
    tags: ['v*']

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    permissions:
      contents: read
      packages: write
      id-token: write

    env:
      PROJECT_NAME: provider-proxmox-crossplane
      REGISTRY: ghcr.io/${{ github.repository }}
      VERSION: ${{ github.ref_name }}
      TARGETOS: linux
      TARGETARCH: ${{ matrix.arch }}
      PACKAGE_ROOT: package
      OUTPUT_DIR: _output

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Crossplane CLI
        run: |
          curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh
          sudo mv crossplane /usr/local/bin/
          chmod +x /usr/local/bin/crossplane

      - name: Build Provider
        run: make build-provider

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Image
        run: |
          make image.build
          make image.publish

      - name: Install unzip
        run: sudo apt-get update && sudo apt-get install -y unzip

      - name: Build Package
        run: |
          pwd
          ls -la
          ls -la package
          mkdir -p _output
          make package PACKAGE_ROOT=$(pwd)/package
          make verify

      - name: Debug Package
        if: always()
        run: |
          echo "Package contents:"
          ls -la _output/verify/
          echo "Package.yaml contents:"
          cat _output/verify/package.yaml

      - name: Debug target for package creation
        if: always()
        run: |
          echo "üîç Debugging Package Creation"
          echo "Environment Variables:"
          env | grep -E "PACKAGE_ROOT|REGISTRY|VERSION|PROJECT_NAME"
          echo "Directory Structure:"
          tree $(PACKAGE_ROOT)